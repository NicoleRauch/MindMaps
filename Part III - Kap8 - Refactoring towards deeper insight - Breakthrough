{
  "title": "Part III: Refactoring toward deeper insight",
  "id": 1,
  "formatVersion": 2,
  "ideas": {
    "1": {
      "title": "Kapitel 8: Breakthrough",
      "id": 2,
      "attr": {
        "style": {
          "background": "#ccffff"
        },
        "collapsed": true
      },
      "ideas": {
        "1": {
          "title": "Beim Refactoring",
          "id": 32,
          "ideas": {
            "1": {
              "title": "Was man daraus gewinnt, ist nicht linear",
              "id": 33
            },
            "2": {
              "title": "Kontinuierliches Refactoring erlaubt einen klareren Blick",
              "id": 34
            },
            "3": {
              "title": "Diese Klarheit besitzt das Potential für radikale neue Erkenntnisse",
              "id": 35,
              "ideas": {
                "1": {
                  "title": "Ereignis! (keine Technik)",
                  "id": 36
                },
                "2": {
                  "title": "Erkennen, was vor sich geht, und entscheiden, wie man damit umgeht",
                  "id": 37,
                  "ideas": {
                    "3": {
                      "title": "Symptome",
                      "id": 40,
                      "ideas": {
                        "1": {
                          "title": "Unerwartete Anforderungen verkomplizieren das Design",
                          "id": 38,
                          "attr": {
                            "style": {
                              "background": "#E0E0E0"
                            }
                          }
                        },
                        "2": {
                          "title": "Zu enge Verbindungen zwischen Teilen des Modells",
                          "id": 42
                        },
                        "3": {
                          "title": "Konzepte entspringen nicht der Domänen-Sprache",
                          "id": 44
                        },
                        "4": {
                          "title": "Algorithmische Widerstände (z. B. Rundungsfehler)",
                          "id": 45
                        }
                      }
                    },
                    "4": {
                      "title": "Lösungsmuster",
                      "id": 41,
                      "ideas": {
                        "1": {
                          "title": "\"Verschiedene\" Fälle sind lediglich Spezialfälle eines fundamentalen Konzepts",
                          "id": 39,
                          "attr": {
                            "style": {
                              "background": "#E0E0E0"
                            }
                          }
                        },
                        "2": {
                          "title": "Entfernen unangemessener Constraints",
                          "id": 43
                        }
                      }
                    },
                    "5": {
                      "title": "Probleme",
                      "id": 46,
                      "ideas": {
                        "1": {
                          "title": "Große Designänderungen erfordern oft große Codeänderungen",
                          "id": 48,
                          "ideas": {
                            "1": {
                              "title": "Kleine Schritte sind nicht möglich",
                              "id": 49
                            },
                            "2": {
                              "title": "Größere Chancen, größere Risiken als bei \"normalen\" Refactorings",
                              "id": 50
                            },
                            "3": {
                              "title": "Kann zu ungünstigen Zeitpunkten erforderlich sein",
                              "id": 51
                            }
                          }
                        }
                      }
                    },
                    "6": {
                      "title": "Wie man einen Breakthrough vorbereitet",
                      "id": 53,
                      "ideas": {
                        "1": {
                          "title": "Nicht erzwingen wollen!",
                          "id": 55
                        },
                        "2": {
                          "title": "Wichtige Designkonzepte explizit machen",
                          "id": 56
                        },
                        "3": {
                          "title": "Das Design geschmeidiger machen",
                          "id": 57
                        },
                        "4": {
                          "title": "Durch kleinere Schritte steigt die Klarheit",
                          "id": 58,
                          "ideas": {
                            "1": {
                              "title": "wichtige Grundvoraussetzung",
                              "id": 59
                            },
                            "2": {
                              "title": "nicht zu weit vorausschauen wollen",
                              "id": 61
                            }
                          }
                        }
                      }
                    },
                    "7": {
                      "title": "Und danach?",
                      "id": 62,
                      "ideas": {
                        "1": {
                          "title": "Nach dem Breakthrough ist vor dem Breakthrough :-)",
                          "id": 63
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "2": {
      "title": "Kapitel 10: Supple Design",
      "id": 25,
      "attr": {
        "style": {
          "background": "#ccffff"
        },
        "collapsed": true
      },
      "ideas": {
        "1": {
          "title": "Wie ein Modell einfach zu benutzen und zu ändern wird. Wie ein tiefes Modell entsteht.",
          "id": 26
        }
      }
    },
    "12": {
      "title": "Kapitel 11: Applying Analysis Patterns",
      "id": 29,
      "attr": {
        "style": {
          "background": "#ccffff"
        },
        "collapsed": true
      },
      "ideas": {
        "1": {
          "title": "Analysis Pattern",
          "id": 104,
          "ideas": {
            "1": {
              "title": "Gruppe von Domänen-Konzepten, die ein häufig vorkommendes Konstrukt bilden",
              "id": 105
            },
            "2": {
              "title": "Ist ein Startpunkt zum Experimentieren, keine fertige Lösung",
              "id": 106
            },
            "0.5": {
              "title": "Martin Fowler: Analysis Patterns",
              "id": 107
            },
            "3": {
              "title": "Keine technische Lösung, sondern Hilfestellung zum Erarbeiten eines Domänenmodells",
              "id": 108
            },
            "4": {
              "title": "Beispiel: Buchhaltung",
              "id": 109,
              "ideas": {
                "1": {
                  "title": "Konto mit Bewegungen",
                  "id": 110
                },
                "2": {
                  "title": "Transaktion: doppelte Buchführung",
                  "id": 111
                },
                "3": {
                  "title": "Anwendung auf Zins- und Gebührenverwaltung, Bewegungen werden explizit",
                  "id": 112
                },
                "4": {
                  "title": "\"Transaktion\" passt nicht, da keine doppelte Buchführung",
                  "id": 113
                },
                "5": {
                  "title": "Klassifizerung der verschiedenen Bewegungen",
                  "id": 114
                },
                "6": {
                  "title": "Strategien zum Erfassen der Bewegungen und zum Aktualisieren",
                  "id": 115
                }
              }
            },
            "3.5": {
              "title": "Bausatz aus Modellfragmenten",
              "id": 116
            },
            "3.75": {
              "title": "Fokussiert auf die kritischsten und schwierigsten Entscheidungen",
              "id": 117
            },
            "3.875": {
              "title": "Beleuchtet Alternativen und Wahlmöglichkeiten",
              "id": 118
            },
            "3.9375": {
              "title": "Zeigt spätere kostspielige Konsequenzen auf",
              "id": 120
            }
          }
        }
      }
    },
    "22": {
      "title": "Kapitel 12: Relating Design Patterns to the Model",
      "id": 30,
      "attr": {
        "style": {
          "background": "#ccffff"
        },
        "collapsed": true
      },
      "ideas": {
        "1": {
          "title": "Manche Design Patterns können als Domain Patterns verwendet werden",
          "id": 83,
          "ideas": {
            "1": {
              "title": "erfordert gleichzeitige Betrachtung auf zwei Leveln",
              "id": 84
            },
            "2": {
              "title": "Design Pattern = technisch, im Code",
              "id": 85
            },
            "3": {
              "title": "Domain Pattern = konzeptionell, im Modell",
              "id": 86
            }
          }
        },
        "2": {
          "title": "Domain Modelle enthalten Prozesse, die nicht technisch motiviert sind, sondern die eine echte Bedeutung in der Problemdomäne haben.",
          "id": 87
        },
        "3": {
          "title": "Strategy Pattern als Domain Pattern",
          "id": 88,
          "ideas": {
            "1": {
              "title": "Kann einen Prozess oder eine Policy beschreiben",
              "id": 90,
              "ideas": {
                "1": {
                  "title": "Routing Service: Schnellste Route vs. günstigste Route",
                  "id": 91
                }
              }
            }
          }
        },
        "4": {
          "title": "Composite Pattern als Domain Pattern",
          "id": 93,
          "ideas": {
            "1": {
              "title": "Kann die Ähnlichkeiten zwischen verschachtelten Containern ausdrücken",
              "id": 94,
              "ideas": {
                "1": {
                  "title": "Lade- und Transportvorgänge können zu Routenabschnitten zusammengefasst werden",
                  "id": 95
                },
                "2": {
                  "title": "Routenabschnitte können zu logischen Segmenten zusammengefasst werden (z. B. Übersee)",
                  "id": 96
                }
              }
            }
          }
        },
        "5": {
          "title": "Erst dann einführen, wenn man es wirklich braucht!",
          "id": 97
        },
        "6": {
          "title": "Nicht jedes Design Pattern ist ein Domain Pattern",
          "id": 98,
          "ideas": {
            "2": {
              "title": "Es muss etwas über die konzeptuelle Domäne sagen",
              "id": 102
            },
            "3": {
              "title": "Nicht nur eine technische Lösung für ein technisches Problem",
              "id": 103
            },
            "13": {
              "title": "Flyweight",
              "id": 99,
              "ideas": {
                "1": {
                  "title": "Keine Verbindung zum Domänenmodell",
                  "id": 100
                },
                "2": {
                  "title": "Implementierungsoption für Value Objects und Entities",
                  "id": 101
                }
              }
            }
          }
        }
      }
    },
    "32": {
      "title": "Kapitel 13: Refactoring toward deeper insight",
      "id": 31,
      "attr": {
        "style": {
          "background": "#ccffff"
        },
        "collapsed": true
      },
      "ideas": {
        "1": {
          "title": "Fokussieren auf",
          "id": 64,
          "ideas": {
            "1": {
              "title": "1. In der Domain leben",
              "id": 65
            },
            "2": {
              "title": "2. Ständig auf neue Art auf die Dinge schauen",
              "id": 66
            },
            "3": {
              "title": "3. Kontinuierlich mit den Domain Experten sprechen",
              "id": 67
            }
          }
        },
        "2": {
          "title": "Startpunkte",
          "id": 68,
          "ideas": {
            "1": {
              "title": "Ein Problem im Code",
              "id": 69
            },
            "2": {
              "title": "Ein fehlendes Konzept",
              "id": 70
            },
            "3": {
              "title": "Eine falsche Beziehung",
              "id": 71
            },
            "4": {
              "title": "Nicht die Sprache der Domain Experten",
              "id": 72
            },
            "5": {
              "title": "Neue Anforderungen passen nicht",
              "id": 73
            }
          }
        },
        "3": {
          "title": "Vorgehensweise",
          "id": 74,
          "ideas": {
            "1": {
              "title": "Kleines Team, spontan zusammengestellt",
              "id": 75
            },
            "2": {
              "title": "2 - 3 Gespräche über wenige Tage",
              "id": 76
            },
            "3": {
              "title": "Die Ubiquitous Language üben und verfeinern",
              "id": 77
            }
          }
        },
        "4": {
          "title": "Augenmaß",
          "id": 78,
          "ideas": {
            "1": {
              "title": "für das richtige Timing",
              "id": 79
            },
            "2": {
              "title": "für das Abwägen des Risikos (ein schlechtes Design zu behalten) und der Kosten (darum herum zu entwickeln)",
              "id": 80
            },
            "3": {
              "title": "für Designs, die nicht die Domäne treffen",
              "id": 81
            },
            "4": {
              "title": "für Modelle, die die Domain Experten ablehnen",
              "id": 82
            }
          }
        }
      }
    },
    "-1": {
      "title": "Wie kommen wir zu einem prägnanten Modell?",
      "id": 3,
      "ideas": {
        "1": {
          "title": "Refactoring",
          "id": 6,
          "ideas": {
            "1": {
              "title": "Design wird flexibler oder verständlicher",
              "id": 7
            },
            "2": {
              "title": "Kein Big Design Up-Front erforderlich, kein langes Vorausschauen",
              "id": 8
            },
            "3": {
              "title": "Literatur zu Refactoring",
              "id": 10,
              "ideas": {
                "1": {
                  "title": "Fowler: Refactoring",
                  "id": 11,
                  "ideas": {
                    "1": {
                      "title": "Erschöpfende Sammlung von Mikro-Refactorings",
                      "id": 12
                    }
                  }
                },
                "2": {
                  "title": "Kerievsky: Refactoring to Patterns",
                  "id": 13,
                  "attr": {
                    "style": {
                      "background": "#E0E0E0"
                    }
                  },
                  "ideas": {
                    "1": {
                      "title": "Immer noch technisch orientiert",
                      "id": 14
                    }
                  }
                }
              }
            },
            "4": {
              "title": "Auf einem höheren Level: Refactoring to a deeper model",
              "id": 15,
              "ideas": {
                "1": {
                  "title": "nicht nur durch den Zustand des Codes getrieben",
                  "id": 16
                },
                "2": {
                  "title": "Veränderungen hin zu einem Modell, das mehr Einsichten vermittelt",
                  "id": 17
                },
                "3": {
                  "title": "Ziel: Verstehen, warum der Code etwas tut, und dieses Verständnis in Beziehung setzen zu Diskussionen mit Domain-Experten",
                  "id": 18
                },
                "4": {
                  "title": "Initiale Modelle sind oft naiv und oberflächlich",
                  "id": 19
                },
                "5": {
                  "title": "Tiefes Modell",
                  "id": 20,
                  "ideas": {
                    "1": {
                      "title": "drückt die Hauptbeweggründe der Domain-Experten aus",
                      "id": 21,
                      "attr": {
                        "style": {
                          "background": "#E0E0E0"
                        }
                      }
                    },
                    "2": {
                      "title": "enthält das relevanteste Wissen der Domain-Experten",
                      "id": 22
                    },
                    "3": {
                      "title": "lässt oberflächliche Aspekte der Domain außen vor",
                      "id": 23
                    },
                    "4": {
                      "title": "hat abstrakte und konkrete Teile",
                      "id": 24
                    }
                  }
                }
              }
            },
            "0.5": {
              "title": "Kontinuierliche Abfolge kleiner, isolierter Designänderungen",
              "id": 9
            }
          }
        }
      },
      "attr": {
        "collapsed": true,
        "style": {
          "background": "#E0E0E0"
        }
      }
    },
    "1.5": {
      "title": "Kapitel 9: Making Implicit Concepts Explicit",
      "id": 27,
      "attr": {
        "style": {
          "background": "#ccffff"
        },
        "collapsed": true
      },
      "ideas": {
        "1": {
          "title": "Wie man die zentralen, relevanten Konzepte der Domain findet und in das Design hineinbringt",
          "id": 28
        }
      }
    }
  },
  "attr": {
    "style": {
      "background": "#ccffff"
    }
  },
  "links": []
}